From c6818d0c25f067bc13198b9aa2ca82776a40ad3b Mon Sep 17 00:00:00 2001
From: Lars Schmertmann <Lars.Schmertmann@governikus.de>
Date: Wed, 14 Dec 2022 11:52:12 +0100
Subject: Revert "Android: Fix QSettings when using content URL"

This reverts commit 140ca89a3c2b8d78889d27217f977cd4de10041b.
---
 src/corelib/io/qsettings.cpp | 21 +++------------------
 1 file changed, 3 insertions(+), 18 deletions(-)

diff --git x/qtbase/src/corelib/io/qsettings.cpp y/qtbase/src/corelib/io/qsettings.cpp
index 60622e3aaa..a999aa6996 100644
--- x/qtbase/src/corelib/io/qsettings.cpp
+++ y/qtbase/src/corelib/io/qsettings.cpp
@@ -48,9 +48,8 @@
 #define Q_XDG_PLATFORM
 #endif
 
-#if !defined(QT_NO_STANDARDPATHS)                                                                  \
-        && (defined(Q_XDG_PLATFORM) || defined(QT_PLATFORM_UIKIT) || defined(Q_OS_ANDROID))
-#    define QSETTINGS_USE_QSTANDARDPATHS
+#if !defined(QT_NO_STANDARDPATHS) && (defined(Q_XDG_PLATFORM) || defined(QT_PLATFORM_UIKIT))
+#define QSETTINGS_USE_QSTANDARDPATHS
 #endif
 
 // ************************************************************************
@@ -1332,15 +1331,6 @@ void QConfFileSettingsPrivate::syncConfFile(QConfFile *confFile)
     }
 
 #ifndef QT_BOOTSTRAPPED
-    QString lockFileName = confFile->name + ".lock"_L1;
-
-#    if defined(Q_OS_ANDROID) && defined(QSETTINGS_USE_QSTANDARDPATHS)
-    // On android and if it is a content URL put the lock file in a
-    // writable location to prevent permissions issues and invalid paths.
-    if (confFile->name.startsWith("content:"_L1))
-        lockFileName = QStandardPaths::writableLocation(QStandardPaths::CacheLocation)
-                + QFileInfo(lockFileName).fileName();
-#    endif
     /*
         Use a lockfile in order to protect us against other QSettings instances
         trying to write the same settings at the same time.
@@ -1348,7 +1338,7 @@ void QConfFileSettingsPrivate::syncConfFile(QConfFile *confFile)
         We only need to lock if we are actually writing as only concurrent writes are a problem.
         Concurrent read and write are not a problem because the writing operation is atomic.
     */
-    QLockFile lockFile(lockFileName);
+    QLockFile lockFile(confFile->name + ".lock"_L1);
     if (!readOnly && !lockFile.lock() && atomicSyncOnly) {
         setStatus(QSettings::AccessError);
         return;
@@ -1426,11 +1416,6 @@ void QConfFileSettingsPrivate::syncConfFile(QConfFile *confFile)
 #if !defined(QT_BOOTSTRAPPED) && QT_CONFIG(temporaryfile)
         QSaveFile sf(confFile->name);
         sf.setDirectWriteFallback(!atomicSyncOnly);
-#    ifdef Q_OS_ANDROID
-        // QSaveFile requires direct write when using content scheme URL in Android
-        if (confFile->name.startsWith("content:"_L1))
-            sf.setDirectWriteFallback(true);
-#    endif
 #else
         QFile sf(confFile->name);
 #endif
-- 
2.39.0

