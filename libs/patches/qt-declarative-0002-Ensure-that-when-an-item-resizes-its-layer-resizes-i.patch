From 659f21ec10f60ba4bc0aba68fe53d309ccb744a5 Mon Sep 17 00:00:00 2001
From: Shawn Rutledge <shawn.rutledge@qt.io>
Date: Wed, 29 Jun 2022 17:33:01 +0200
Subject: Ensure that when an item resizes, its layer resizes immediately

geometryChange() notifies QQuickItemLayer::updateGeometry() to update
its internal bounds; at that moment, QQuickImagePrivate::paintedHeight
has not yet been updated, so the QQuickImage::boundingRect() override
returns the old size. It gets updated in updatePaintedGeometry(); but
until then, it's better to use QQuickItem::boundingRect() without
polymorphism, because that simply returns the item width and height.
An alternative would be to use clipRect(), as it was before
9b62f4c27ac3fb3dc563c7f4657094c14d752bac; but that is more complex now:
in case ItemObservesViewport is set, we would need to worry about
whether it's more appropriate to have the item's layer the same size
as the viewport (and update it more often during scrolling), or the
same size as the item, as it was before.

Amends 9b62f4c27ac3fb3dc563c7f4657094c14d752bac

Fixes: QTBUG-104442
Fixes: QTBUG-104536
Pick-to: 6.4 6.3
Change-Id: I51e25402d358a57cea9fd718ee8fe759b572b1a2
---
 src/quick/items/qquickitem.cpp                |   2 +-
 .../qquickitemlayer/data/itemImageLayer.qml   |  14 +++++++++++
 .../quick/qquickitemlayer/data/qt-logo.png    | Bin 0 -> 1301 bytes
 .../qquickitemlayer/tst_qquickitemlayer.cpp   |  23 ++++++++++++++++++
 4 files changed, 38 insertions(+), 1 deletion(-)
 create mode 100644 tests/auto/quick/qquickitemlayer/data/itemImageLayer.qml
 create mode 100644 tests/auto/quick/qquickitemlayer/data/qt-logo.png

diff --git x/qtdeclarative/src/quick/items/qquickitem.cpp y/qtdeclarative/src/quick/items/qquickitem.cpp
index 8102a473db..6629d61a29 100644
--- x/qtdeclarative/src/quick/items/qquickitem.cpp
+++ y/qtdeclarative/src/quick/items/qquickitem.cpp
@@ -9508,7 +9508,7 @@ void QQuickItemLayer::updateGeometry()
 {
     QQuickItem *l = m_effect ? (QQuickItem *) m_effect : (QQuickItem *) m_effectSource;
     Q_ASSERT(l);
-    QRectF bounds = m_item->boundingRect();
+    QRectF bounds = m_item->QQuickItem::boundingRect();
     l->setSize(bounds.size());
     l->setPosition(bounds.topLeft() + m_item->position());
 }
diff --git x/qtdeclarative/tests/auto/quick/qquickitemlayer/data/itemImageLayer.qml y/qtdeclarative/tests/auto/quick/qquickitemlayer/data/itemImageLayer.qml
new file mode 100644
index 0000000000..1f05aa882f
--- /dev/null
+++ y/qtdeclarative/tests/auto/quick/qquickitemlayer/data/itemImageLayer.qml
@@ -0,0 +1,14 @@
+import QtQuick
+
+Item {
+	width: 300
+	height: 300
+
+	Image {
+        objectName: "image"
+		anchors.fill: parent
+		fillMode: Image.PreserveAspectFit
+        source: "qt-logo.png"
+		layer.enabled: true
+	}
+}
diff --git x/qtdeclarative/tests/auto/quick/qquickitemlayer/data/qt-logo.png y/qtdeclarative/tests/auto/quick/qquickitemlayer/data/qt-logo.png
new file mode 100644
index 0000000000..dff7729515
Binary files /dev/null and y/qtdeclarative/tests/auto/quick/qquickitemlayer/data/qt-logo.png differ
diff --git x/qtdeclarative/tests/auto/quick/qquickitemlayer/tst_qquickitemlayer.cpp y/qtdeclarative/tests/auto/quick/qquickitemlayer/tst_qquickitemlayer.cpp
index ae6947f01b..90e1ab0a66 100644
--- x/qtdeclarative/tests/auto/quick/qquickitemlayer/tst_qquickitemlayer.cpp
+++ y/qtdeclarative/tests/auto/quick/qquickitemlayer/tst_qquickitemlayer.cpp
@@ -31,10 +31,12 @@
 #include <QtQuick/qquickitem.h>
 #include <QtQuick/qquickview.h>
 #include <QtQuick/qsgrendererinterface.h>
+#include <QtQuick/private/qquickitem_p.h>
 #include <qopenglcontext.h>
 #include <qopenglfunctions.h>
 
 #include <QtQuickTestUtils/private/qmlutils_p.h>
+#include <QtQuickTestUtils/private/viewtestutils_p.h>
 
 #include <QtGui/private/qguiapplication_p.h>
 #include <QtGui/qpa/qplatformintegration.h>
@@ -85,6 +87,8 @@ private slots:
     void textureMirroring_data();
     void textureMirroring();
 
+    void effectSourceResizeToItem();
+
 private:
     void mirroringCheck(int mirroring, int x, bool shouldMirror, const QImage &fb);
 };
@@ -468,6 +472,25 @@ void tst_QQuickItemLayer::textureMirroring()
     mirroringCheck(mirroring, 200, true, fb);
 }
 
+void tst_QQuickItemLayer::effectSourceResizeToItem() // QTBUG-104442
+{
+    QQuickView window;
+    QVERIFY(QQuickTest::showView(window, testFileUrl("itemImageLayer.qml")));
+    window.setResizeMode(QQuickView::SizeRootObjectToView);
+    QQuickItem *image = window.rootObject()->findChild<QQuickItem*>("image");
+    QVERIFY(image);
+    QCOMPARE(image->size(), window.rootObject()->size());
+    QQuickItemLayer *layer = QQuickItemPrivate::get(image)->layer();
+    QVERIFY(layer);
+    auto *effectSource = layer->effectSource();
+    QVERIFY(effectSource);
+    QCOMPARE(effectSource->size(), image->size());
+
+    window.resize(200, 200); // shrink it a bit
+    QTRY_COMPARE(image->size().toSize(), QSize(200, 200)); // wait for the window system
+    QCOMPARE(effectSource->size(), image->size());
+}
+
 void tst_QQuickItemLayer::mirroringCheck(int mirroring, int x, bool shouldMirror, const QImage &fb)
 {
     int offset = 10;
-- 
2.32.1 (Apple Git-133)
