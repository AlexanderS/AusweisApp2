From 7163363866d36b6ba8452d78cf26014e4c007f96 Mon Sep 17 00:00:00 2001
From: Jens Trillmann <jens.trillmann@governikus.de>
Date: Tue, 24 May 2022 08:57:45 +0200
Subject: Android A11Y: Fix TalkBack scrolling behavior

* Add CollectionInfo to scrollable nodes.
  Every scrollable node will get a CollectionInfo attached to signal
  the number of (possibly invisible) children.
  This is necessary as TalkBack on Android doesn't scroll to items not
  visible on screen if the number of further child nodes is not
  communicated to TalkBack.
* Return success of scroll to TalkBack.
  TalkBack needs the result of the scroll to decide if it should leave
  the current element or stay after a scroll was successful.
  Success of a scroll action is measured as the successful movement
  of the children of the scrolled element. This is a workaround for
  the Qt Accessibility API not returning the success of failure of a
  performed action.

Task-number: QTBUG-103499
Pick-to: 6.4 6.3 6.2 5.15
Change-Id: Ie2c51d0b77fb5030973a0f93c42e0db3082be45e
---
 .../QtAccessibilityDelegate.java              |  3 ++
 .../android/androidjniaccessibility.cpp       | 28 ++++++++++++++++---
 2 files changed, 27 insertions(+), 4 deletions(-)

diff --git x/qtbase/src/android/jar/src/org/qtproject/qt/android/accessibility/QtAccessibilityDelegate.java y/qtbase/src/android/jar/src/org/qtproject/qt/android/accessibility/QtAccessibilityDelegate.java
index bd8909b45e0..ad62cce74d6 100644
--- x/qtbase/src/android/jar/src/org/qtproject/qt/android/accessibility/QtAccessibilityDelegate.java
+++ y/qtbase/src/android/jar/src/org/qtproject/qt/android/accessibility/QtAccessibilityDelegate.java
@@ -51,6 +51,7 @@ import android.view.ViewParent;
 import android.text.TextUtils;
 
 import android.view.accessibility.*;
+import android.view.accessibility.AccessibilityNodeInfo.CollectionInfo;
 import android.view.MotionEvent;
 import android.view.View.OnHoverListener;
 
@@ -445,6 +446,8 @@ public class QtAccessibilityDelegate extends View.AccessibilityDelegate
         int[] ids = QtNativeAccessibility.childIdListForAccessibleObject(virtualViewId);
         for (int i = 0; i < ids.length; ++i)
             node.addChild(m_view, ids[i]);
+        if (node.isScrollable())
+            node.setCollectionInfo(CollectionInfo.obtain(ids.length, 1, false));
 
         return node;
     }
diff --git x/qtbase/src/plugins/platforms/android/androidjniaccessibility.cpp y/qtbase/src/plugins/platforms/android/androidjniaccessibility.cpp
index 75f1dc9c0ab..1d47d015d9f 100644
--- x/qtbase/src/plugins/platforms/android/androidjniaccessibility.cpp
+++ y/qtbase/src/plugins/platforms/android/androidjniaccessibility.cpp
@@ -226,7 +226,7 @@ namespace QtAndroidAccessibility
         return result;
     }
 
-    static QRect screenRect_helper(int objectId)
+    static QRect screenRect_helper(int objectId, bool clip = true)
     {
         QRect rect;
         QAccessibleInterface *iface = interfaceFromId(objectId);
@@ -234,7 +234,7 @@ namespace QtAndroidAccessibility
             rect = QHighDpi::toNativePixels(iface->rect(), iface->window());
         }
         // If the widget is not fully in-bound in its parent then we have to clip the rectangle to draw
-        if (iface && iface->parent() && iface->parent()->isValid()) {
+        if (clip && iface && iface->parent() && iface->parent()->isValid()) {
             const auto parentRect = QHighDpi::toNativePixels(iface->parent()->rect(), iface->parent()->window());
             rect = rect.intersected(parentRect);
         }
@@ -336,23 +336,43 @@ namespace QtAndroidAccessibility
     static jboolean scrollForward(JNIEnv */*env*/, jobject /*thiz*/, jint objectId)
     {
         bool result = false;
+
+        const auto& ids = childIdListForAccessibleObject_helper(objectId);
+        if (ids.isEmpty())
+            return false;
+
+        int firstChildId = ids.first();
+        QRect oldPosition = screenRect_helper(firstChildId, false);
+
         if (m_accessibilityContext) {
             runInObjectContext(m_accessibilityContext, [objectId]() {
                 return scroll_helper(objectId, QAccessibleActionInterface::increaseAction());
             }, &result);
         }
-        return result;
+
+        // Don't check for position change if the call was not successful
+        return result && oldPosition != screenRect_helper(firstChildId, false);
     }
 
     static jboolean scrollBackward(JNIEnv */*env*/, jobject /*thiz*/, jint objectId)
     {
         bool result = false;
+
+        const auto& ids = childIdListForAccessibleObject_helper(objectId);
+        if (ids.isEmpty())
+            return false;
+
+        int firstChildId = ids.first();
+        QRect oldPosition = screenRect_helper(firstChildId, false);
+
         if (m_accessibilityContext) {
             runInObjectContext(m_accessibilityContext, [objectId]() {
                 return scroll_helper(objectId, QAccessibleActionInterface::decreaseAction());
             }, &result);
         }
-        return result;
+
+        // Don't check for position change if the call was not successful
+        return result && oldPosition != screenRect_helper(firstChildId, false);
     }
 
 
-- 
2.37.3

